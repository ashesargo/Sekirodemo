using UnityEngine;
using System.Collections.Generic;

// 道具數據基類
[CreateAssetMenu(fileName = "ItemData", menuName = "Items/Item")]
public class ItemData : ScriptableObject
{
    [Header("基本資料")]
    public string itemName;     // 道具名稱
    public Sprite icon;     // 道具圖標
    public string description;  // 道具描述
    public bool isConsumable;   // 是否為消耗品
    public int maxStack = 99;   // 最大堆疊數量
    
    [Header("使用設定")]
    public float useTime = 1f;  // 使用時間（秒）
    public bool canUseInCombat = true;  // 戰鬥中是否可使用
    public bool canUseWhileMoving = false;  // 移動中是否可使用

    // 使用道具的虛擬方法，可被子類重寫
    public virtual void Use(GameObject user)
    {
        Debug.Log($"{itemName} used!");
    }
}

// 道具槽位類
[System.Serializable]
public class ItemSlot
{
    public ItemData item; // 道具數據
    public int quantity;  // 道具數量
    
    // 構造函數
    public ItemSlot(ItemData item = null, int quantity = 0)
    {
        this.item = item;
        this.quantity = quantity;
    }
    
    // 槽位是否為空
    public bool IsEmpty => item == null || quantity <= 0;
    
    // 檢查是否可以添加指定數量的道具
    public bool CanAddItem(ItemData newItem, int amount = 1)
    {
        if (IsEmpty) return true;              // 空槽位可以添加
        if (item != newItem) return false;     // 不同道具不能堆疊
        return quantity + amount <= item.maxStack; // 檢查是否超過最大堆疊
    }
}

// 玩家狀態管理器
public class PlayerStats : MonoBehaviour
{
    [Header("生命值與架勢")]
    public HealthPostureSystem healthPostureSystem; // 生命值與架勢系統
    public int maxHealth = 100;                     // 最大生命值
    public int maxPosture = 100;                    // 最大架勢值
    
    [Header("道具系統")]
    public Inventory inventory;                     // 道具欄引用
    
    // 初始化玩家狀態
    private void Start()
    {
        // 初始化生命值與架勢系統
        healthPostureSystem = new HealthPostureSystem(maxHealth, maxPosture);
        
        // 初始化道具欄
        if (inventory == null)
            inventory = GetComponent<Inventory>();
    }
    
    // 每幀更新，處理架勢自動恢復
    private void Update()
    {
        // 處理架勢自動恢復
        healthPostureSystem.HandlePostureRecovery();
    }
    
    // 治療玩家
    public void Heal(int amount)
    {
        healthPostureSystem.HealthHeal(amount);
    }
    
    // 對玩家造成傷害
    public void TakeDamage(int amount)
    {
        healthPostureSystem.HealthDamage(amount);
    }
    
    // 增加架勢值
    public void IncreasePosture(int amount)
    {
        healthPostureSystem.PostureIncrease(amount);
    }
    
    // 減少架勢值
    public void DecreasePosture(int amount)
    {
        healthPostureSystem.PostureDecrease(amount);
    }
}

// 道具欄管理器
public class Inventory : MonoBehaviour
{
    [Header("道具欄設定")]
    public List<ItemSlot> slots = new List<ItemSlot>(); // 道具槽位列表
    public int maxSlots = 10;                           // 最大槽位數
    
    [Header("快捷鍵設定")]
    public KeyCode[] quickSlotKeys = { KeyCode.Alpha1, KeyCode.Alpha2, KeyCode.Alpha3, KeyCode.Alpha4 }; // 快捷鍵
    
    // 初始化道具欄
    private void Start()
    {
        // 初始化道具欄
        InitializeSlots();
    }
    
    // 每幀更新，檢查快捷鍵輸入
    private void Update()
    {
        // 檢查快捷鍵輸入
        CheckQuickSlotInput();
    }
    
    // 初始化道具槽位
    private void InitializeSlots()
    {
        slots.Clear();
        for (int i = 0; i < maxSlots; i++)
        {
            slots.Add(new ItemSlot());
        }
    }
    
    // 檢查快捷鍵輸入並使用對應道具
    private void CheckQuickSlotInput()
    {
        for (int i = 0; i < quickSlotKeys.Length && i < slots.Count; i++)
        {
            if (Input.GetKeyDown(quickSlotKeys[i]))
            {
                UseItem(i);
            }
        }
    }
    
    // 添加道具到道具欄
    public bool AddItem(ItemData item, int quantity = 1)
    {
        // 先嘗試堆疊到現有道具
        for (int i = 0; i < slots.Count; i++)
        {
            if (slots[i].CanAddItem(item, quantity))
            {
                if (slots[i].IsEmpty)
                {
                    slots[i].item = item;
                    slots[i].quantity = quantity;
                }
                else
                {
                    slots[i].quantity += quantity;
                }
                return true;
            }
        }
        
        // 找空位放置
        for (int i = 0; i < slots.Count; i++)
        {
            if (slots[i].IsEmpty)
            {
                slots[i].item = item;
                slots[i].quantity = quantity;
                return true;
            }
        }
        
        Debug.Log("道具欄已滿！");
        return false;
    }
    
    // 使用指定槽位的道具
    public void UseItem(int index)
    {
        if (index < 0 || index >= slots.Count) return;
        
        var slot = slots[index];
        if (slot.item != null && slot.quantity > 0)
        {
            slot.item.Use(gameObject);
            if (slot.item.isConsumable)
            {
                slot.quantity--;
                if (slot.quantity <= 0)
                {
                    slot.item = null;
                }
            }
        }
    }
    
    // 從指定槽位移除道具
    public void RemoveItem(int index, int quantity = 1)
    {
        if (index < 0 || index >= slots.Count) return;
        
        var slot = slots[index];
        if (slot.item != null && slot.quantity > 0)
        {
            slot.quantity -= quantity;
            if (slot.quantity <= 0)
            {
                slot.item = null;
            }
        }
    }
}

// 治療葫蘆
[CreateAssetMenu(menuName = "Items/Healing Gourd")]
public class HealingGourd : ItemData
{
    [Header("治療設定")]
    public int healAmount = 50;                // 治療量
    public int maxUses = 3;                    // 最大使用次數
    public float cooldownTime = 30f;           // 冷卻時間（秒）
    
    private float lastUseTime;  // 上次使用時間
    
    // 使用治療葫蘆
    public override void Use(GameObject user)
    {
        // 檢查冷卻時間
        if (Time.time - lastUseTime < cooldownTime)
        {
            Debug.Log("葫蘆還在冷卻中！");
            return;
        }
        
        var stats = user.GetComponent<PlayerStats>();
        if (stats != null)
        {
            stats.Heal(healAmount);
            lastUseTime = Time.time;
            Debug.Log($"使用葫蘆恢復了 {healAmount} 點生命值！");
        }
    }
}

// 糖類道具
[CreateAssetMenu(menuName = "Items/Sugar")]
public class Sugar : ItemData
{
    [Header("糖類設定")]
    public float duration = 30f;               // 效果持續時間
    public float effectMultiplier = 1.5f;      // 效果倍數
    
    // 使用糖類
    public override void Use(GameObject user)
    {
        var stats = user.GetComponent<PlayerStats>();
        if (stats != null)
        {
            // 這裡可以添加糖類效果，如增加攻擊力、防禦力等
            Debug.Log($"使用糖類，效果持續 {duration} 秒！");
        }
    }
}

// 神隱糖
[CreateAssetMenu(menuName = "Items/Divine Confetti")]
public class DivineConfetti : ItemData
{
    [Header("神隱糖設定")]
    public float invisibilityDuration = 10f;   // 隱身持續時間
    public float damageMultiplier = 2f;        // 傷害倍數
    
    // 使用神隱糖
    public override void Use(GameObject user)
    {
        Debug.Log($"使用神隱糖，隱身 {invisibilityDuration} 秒！");
        // 這裡可以添加隱身效果
    }
}

// 紙人偶
[CreateAssetMenu(menuName = "Items/Spirit Emblem")]
public class SpiritEmblem : ItemData
{
    [Header("紙人偶設定")]
    public int emblemCost = 1;                 // 消耗數量
    public float prostheticArtDamage = 25f;    // 義手技藝傷害
    
    // 使用紙人偶
    public override void Use(GameObject user)
    {
        Debug.Log($"消耗 {emblemCost} 個紙人偶使用義手技藝！");
        // 此添加義手技藝效果
    }
}